using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Iceage : MonoBehaviour
{
    // Start is called before the first frame update

    public GameObject[] SpawnIceObject;
    public float spawnRadius = 5.0f; // spawnRadius that spawn ice age radius
    public float spawnHeight = 2.0f; // spawn height

    private bool death = false;

    public int NumofIce = 10; // number of falling ice

    void Start()
    {
        StartCoroutine("SpawnIce");
        StartCoroutine("DestroyIce");
        //start two couroutine 
    }

    // Update is called once per frame
    

    private Vector3 GetRandomPositionOnCircle(float radius) // A function that generates ice at random coordinates within a circle radius
    {
        Vector3 randomDirection = Random.onUnitSphere; // random value in circle radius
        randomDirection.y = 0; //Create a circular shape by fixing the y-axis to 0

        float r = Random.Range(0.0f, radius);
        /*This code generates a random float value between 0.0f and radius.

          Here, Random is a class that generates random values ​​provided by Unity, and Range() is a method that returns values ​​generated by this Random class within a specified range.

        So, we assign the r variable a random value generated between 0.0f and radius.*/  
        return (randomDirection * r) + transform.position; // Implemented a function to move a game object from its current location to a random location within a certain range
    }

    IEnumerator SpawnIce() // spawn Ice Prefabs
    {
        if (!death)
        {
            while (true)
            {
                Vector3 spawnPosition = GetRandomPositionOnCircle(spawnRadius); // call func that return instantiate position
                spawnPosition.y = spawnHeight; // set height
                int randomValue = Random.Range(0, 2); // there are two type ice so i make array
                GameObject go = Instantiate(SpawnIceObject[randomValue], spawnPosition, Quaternion.identity);
                go.transform.parent = this.transform; // put it as a child of Ice 
                //SpawnIceObject[randomValue].transform.parent = this.transform;
                yield return new WaitForSeconds(0.5f); // Ice spawn delay
            }
        }
    }

    IEnumerator DestroyIce() // destory Ice prefabs
    {
        yield return new WaitForSeconds(5.0f);
        Destroy(this.gameObject);
    }
}
